import { Injectable, Inject } from "@angular/core";
import { LOCAL_STORAGE, StorageService } from "ngx-webstorage-service";

import { Observable, of, throwError } from "rxjs";
<<<<<<< HEAD
import { MergeField, MergeFieldApiInterface } from "../stores/merge-field-store";
import { delay, mergeMap } from 'rxjs/operators';
import { CrudStateApiInterface } from '../stores/api-entity';
=======
import {
  MergeField,
  MergeFieldApiInterface
} from "../stores/merge-field-store";
import { delay, mergeMap } from "rxjs/operators";
>>>>>>> 74fd225c9a88e450563ad0ec045b7bd89a8c7a6a

const MERGE_FIELD_KEY = "MERGE_FIELD_KEY";

@Injectable({
  providedIn: "root"
})
<<<<<<< HEAD
export class MergeFieldApiService implements CrudStateApiInterface<MergeField> {
  get(): Observable<MergeField[]> {
    throw new Error("Method not implemented.");
=======
export class MergeFieldApiService implements MergeFieldApiInterface {
  constructor(@Inject(LOCAL_STORAGE) private storage: StorageService) {
    storage.set(MERGE_FIELD_KEY, [{ name: "blahssss", type: "Number" }]);
  }

  get(): Observable<MergeField[]> {
    let mergeFields = <Array<MergeField>>this.storage.get(MERGE_FIELD_KEY);
    return of(mergeFields).pipe(
      delay(2000)
      //,mergeMap(x=> throwError(new Error("Api Error")))
    );
>>>>>>> 74fd225c9a88e450563ad0ec045b7bd89a8c7a6a
  }
  create(entity: MergeField): Observable<MergeField[]> {
    throw new Error("Method not implemented.");
  }
  update(entity: MergeField): Observable<MergeField[]> {
    throw new Error("Method not implemented.");
  }
  delete(entity: MergeField): Observable<MergeField[]> {
    throw new Error("Method not implemented.");
  }
  constructor(@Inject(LOCAL_STORAGE) private storage: StorageService) {
    storage.set(MERGE_FIELD_KEY, [{ name: "blahssss", type: "blahssss" }]);
  }


}
